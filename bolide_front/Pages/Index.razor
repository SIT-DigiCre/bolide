@page "/"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager

<p>@state</p>
@if (isConnected)
{
    <p>ルーム名:@RoomName</p>
    <form class="input-group mb-2" @onsubmit="PostComment">
        <input type="text" class="form-control" @bind-value="comment" @bind-value:event="oninput">
        <div class="input-group-append">
            <button type="button" class="btn btn-outline-primary" @onclick="PostComment">送信</button>
        </div>
    </form>
    @foreach (var log in logs)
    {
        <p>@log</p>
    }
}
else
{
    <input type="text" @bind-value="RoomName" @bind-value:event="oninput">
    <button class="btn btn-primary" @onclick="Connect">接続</button>
}



@code {
    bool isConnected = false;
    private Connection connection;
    string state = "未接続";
    List<string> logs = new List<string>();
    [Parameter]
    public string RoomName { get; set; } = "";
    string comment = "";
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("roomname", out var roomName))
        {
            RoomName = roomName;
            Connect();
        }
    }
    private void Connect()
    {
        if (RoomName == "")
        {
            state = "room名が空です";
            StateHasChanged();
            return;
        }
        connection = new Connection(false, RoomName, "https://bolide.digicre.net/","wss://bolide.digicre.net/");
        connection.ConnectionStartHandler += (sender, e) =>
        {
            state = "接続済";
            isConnected = true;
            StateHasChanged();
        };
        connection.CommentEventHandler += (sender, e) =>
        {
            logs.Insert(0, e.comment);
            StateHasChanged();
        };
        connection.ConnectionErrorHandler += (sender, e) =>
        {
            switch(e.erorrKind){
                case Connection.ErorrKind.WebsocketClosed:
                    state = "接続終了";
                    StateHasChanged();
                    Connect();
                    break;
                case Connection.ErorrKind.WebsocketError:
                    state = "接続エラー";
                    StateHasChanged();
                    break;
            }
        };
        connection.StartConnection();

    }
    private void PostComment()
    {
        if (connection == null) return;
        if(comment=="")return;
        connection.PostComment(comment, false);
        comment = "";
        StateHasChanged();
    }
}
