@page "/"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager

<p>@state - ルーム名:@RoomName</p>
@if (isConnected)
{
    <form class="mb-2" @onsubmit="PostComment">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind-value="isQuestion" @bind-value:event="oninput" id="q-check">
                <label class="form-check-label" for="q-check">質問として投稿</label>
            </div>
        <div class="input-group form-group">
            <input type="text" class="form-control" @bind-value="comment" @bind-value:event="oninput" />
            <div class="input-group-append">
                <button type="button" class="btn btn-outline-primary" @onclick="PostComment">送信</button>
            </div>
        </div>
    </form>
    @foreach (var c in comments)
    {
        @if (c.isQuestion)
        {
            <p style="font-weight: bold">[質問]@c.text</p>
        }
        else
        {
            <p>@c.text</p>
        }
        
    }
}
else
{
    <input type="text" @bind-value="RoomName" @bind-value:event="oninput">
    <button class="btn btn-primary" @onclick="Connect">接続</button>
}



@code {
    bool isConnected = false;
    private Connection connection;
    string state = "未接続";
    List<Comment> comments = new List<Comment>();
    [Parameter]
    public string RoomName { get; set; } = "";
    string comment = "";
    public bool isQuestion { get; set; } = false;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("roomname", out var roomName))
        {
            RoomName = roomName;
            Connect();
        }
    }
    private void Connect()
    {
        if (RoomName == "")
        {
            state = "room名が空です";
            StateHasChanged();
            return;
        }
        connection = new Connection(false, RoomName, "https://bolide.digicre.net","wss://bolide.digicre.net");
        connection.ConnectionStartHandler += (sender, e) =>
        {
            state = "接続済";
            isConnected = true;
            StateHasChanged();
        };
        connection.CommentEventHandler += (sender, e) =>
        {
            comments.Insert(0, new Comment(){ text=e.comment, isQuestion=e.isQuestion });
            StateHasChanged();
        };
        connection.ConnectionErrorHandler += (sender, e) =>
        {
            switch(e.erorrKind){
                case Connection.ErorrKind.WebsocketClosed:
                    state = "接続終了";
                    StateHasChanged();
                    Connect();
                    break;
                case Connection.ErorrKind.WebsocketError:
                    state = "接続エラー";
                    StateHasChanged();
                    break;
            }
        };
        connection.StartConnection();

    }
    private void PostComment()
    {
        if (connection == null) return;
        if(comment=="")return;
        connection.PostComment(comment, isQuestion);
        comment = "";
        StateHasChanged();
    }
}
